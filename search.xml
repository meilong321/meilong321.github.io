<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[IntelliJ IDEA 常用快捷键]]></title>
    <url>%2F2017%2F09%2F17%2FIDEAKeyMap%2F</url>
    <content type="text"><![CDATA[IntelliJ IDEA 常用快捷键 查询快捷键CTRL+N 查找类CTRL+SHIFT+N 查找文件CTRL+SHIFT+ALT+N 查找类中的方法或变量CIRL+B 找变量的来源CTRL+ALT+B 找所有的子类CTRL+SHIFT+B 找变量的类CTRL+G 定位行CTRL+F 在当前窗口查找文本CTRL+SHIFT+F 在指定窗口查找文本CTRL+R 在当前窗口替换文本CTRL+SHIFT+R 在指定窗口替换文本ALT+SHIFT+C 查找修改的文件CTRL+E 最近打开的文件F3 向下查找关键字出现位置SHIFT+F3 向上一个关键字出现位置F4 查找变量来源CTRL+ALT+F7 选中的字符查找工程出现的地方CTRL+SHIFT+O 弹出显示查找内容 自动代码ALT+回车 导入包,自动修正CTRL+ALT+L 格式化代码CTRL+ALT+I 自动缩进CTRL+ALT+O 优化导入的类和包ALT+INSERT 生成代码(如GET,SET方法,构造函数等)CTRL+E或者ALT+SHIFT+C 最近更改的代码CTRL+SHIFT+SPACE 自动补全代码CTRL+空格 代码提示 (和系统输入法冲突，请在Settings-&gt;Keymap-&gt;mainmenu -&gt; code -&gt;Completion-&gt;basic，右键添加自己的快捷键)CTRL+ALT+SPACE 类名或接口名提示CTRL+P 方法参数提示CTRL+J 自动代码CTRL+ALT+T 把选中的代码放在 TRY{} IF{}ELSE{} 里 复制快捷方式F5 拷贝文件快捷方式CTRL+D 复制行CTRL+X 剪切,删除行CTRL+SHIFT+V 可以复制多个文本 高亮CTRL+F 选中的文字,高亮显示上下跳到下一个或者上一个F2 或SHIFT+F2 高亮错误或警告快速定位CTRL+SHIFT+F7 高亮显示多个关键字. 其他快捷方式CIRL+U 大小写切换CTRL+Z 倒退CTRL+SHIFT+Z 向前CTRL+ALT+F12 资源管理器打开文件夹在WINDOW窗口快速定位到文件或者文件夹的位置ALT+F1 查找文件所在目录位置SHIFT+ALT+INSERT 竖编辑模式CTRL+/ 注释//CTRL+SHIFT+/ 注释CTRL+W 选中代码，连续按会有其他效果CTRL+B 快速打开光标处的类或方法ALT+ ←/→ 切换代码视图CTRL+ALT ←/→ 返回上次编辑的位置ALT+ ↑/↓ 在方法间快速移动定位SHIFT+F6 重构-重命名CTRL+H 显示类结构图CTRL+Q 显示注释文档ALT+1 快速打开或隐藏工程面板CTRL+SHIFT+UP/DOWN 代码向上/下移动。CTRL+UP/DOWN 光标跳转到第一行或最后一行下ESC 光标返回编辑框SHIFT+ESC 光标返回编辑框,关闭无用的窗口F1 帮助 (不建议使用，很慢)CTRL+F4 关闭当前打开文件]]></content>
      <categories>
        <category>IDE</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[MyBatis ResultMap复杂映射]]></title>
    <url>%2F2017%2F09%2F17%2FresultMap%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;MyBatis中在查询进行select映射的时候，返回类型可以用resultType，也可以用resultMap。resultType是直接表示返回类型的,而resultMap则是对外部ResultMap的引用但是resultType跟resultMap不能同时存在。&emsp;&emsp;在MyBatis进行查询映射的时候，其实查询出来的每一个属性都是放在一个对应的Map里面的，其中键是属性名，值则是其对应的值。当提供的返回类型属性是resultType的时候，MyBatis会将Map里面的键值对取出赋给resultType所指定的对象对应的属性。所以其实MyBatis的每一个查询映射的返回类型都是ResultMap，只是当我们提供的返回类型属性是resultType的时候，MyBatis对自动的给我们把对应的值赋给resultType所指定对象的属性，但当这个对象中有自定义类型的属性时, Mybatis就无法自动装配这个属性了, 此时就需要用到resultMap了, Mybatis会根据我们配置的信息进行映射 12345678910111213141516&lt;resultMap id="bookWhole" type="book"&gt; &lt;constructor&gt; &lt;idArg property="id" column="book_id" javaType="int"/&gt; &lt;result property="bookName" column="bookName" /&gt; &lt;/constructor&gt; &lt;result property="publishPress" column="publishPress" /&gt; &lt;result priority="publishDate" column="publishDate" /&gt; &lt;association property="type" javaType="bookType" column="bookType"&gt; &lt;id property="id" column="type_id"/&gt; &lt;result property="typeName" column="typeName"/&gt; &lt;/association&gt; &lt;collection property="authors" ofType="author" column="author" &gt; &lt;id property="id" column="author_id"/&gt; &lt;result property="name" column="author_name"/&gt; &lt;/collection&gt;&lt;/resultMap&gt; resultMap元素resultMap元素是复杂映射的根元素, 其id表示select查询中要配置的名称, type指定一个实体类 一. Constructor 元素1234&lt;constructor&gt; &lt;idArg property="id" column="book_id" javaType="int"/&gt; &lt;result property="bookName" column="bookName" /&gt;&lt;/constructor&gt; 实例化的时候通过构造器将结果集注入到类中idArg : ID 参数; 将结果集标记为ID，以方便全局调用arg : 注入构造器的结果集 属性 property 映射数据库列的字段或属性。若 JavaBean 的属性名与给定的名称匹配，就会使用匹配的名字。否则，MyBatis 将搜索给定名称的字段。 column 数据库的列名或者列标签别名。与传递给resultSet.getString(columnName)的参数名称相同。 javaType 指定java类名。如果映射到一个JavaBean，MyBatis 通常会自行检测到。如果映射到一个HashMap，应该明确指定javaType。 jdbcType 指定支持的JDBC。这个属性只在insert，update或delete 的时候针对允许空的列有用。JDBC 需要这项，但MyBatis 不需要。如果直接编写JDBC代码，在允许为空值的情况下需要指定这个类型。 typeHandler 这个属性可以重写默认类型处理器。它的值可以是一个TypeHandler实现的完整类名，也可以是一个类型别名。 二. id, result 元素12&lt;id property="id" column="type_id"/&gt;&lt;result property="typeName" column="typeName"/&gt; id对应表中的主键, result对应普通列. 两者的作用都是将数据库列映射到属性. 虽然不使用id元素也不会影响映射结果, 但比较对象实例时id会作为结果集的标识属性, 能够提高性能, 尤其是应用缓存和嵌套结果映射的时候 属性id、result的属性效果和Constructor元素一样 三. Association元素1234&lt;association property="type" javaType="bookType" column="bookType"&gt; &lt;id property="id" column="type_id"/&gt; &lt;result property="typeName" column="typeName"/&gt;&lt;/association&gt; &emsp;&emsp;Association元素 : 复杂类型联合;许多查询结果合成这个类型. 用来处理”多对一(many-to-one)”或”一对一(one-to-one)” 这类关系.associations能引用自身,或者从其它地方引用 属性 Association元素的包含了Constructor元素的所有属性, 同时也有自己特用的属性 select 这个属性，通过ID引用另一个加载复杂类型的映射语句。从指定列属性中返回的值，将作为参数设置给目标select 语句。表格下方将有一个例子。注意：在处理组合键时，您可以使用column=”{prop1=col1,prop2=col2}”这样的语法，设置多个列名传入到嵌套语句。这就会把prop1和prop2设置到目标嵌套语句的参数对象中。 四. Collection元素1234&lt;collection property="authors" ofType="author" column="author" &gt; &lt;id property="id" column="author_id"/&gt; &lt;result property="name" column="author_name"/&gt;&lt;/collection&gt; &emsp;&emsp;Collection元素的功能和Associations非常类似, 其主要用来处理”一对多(one-to-many)”或”多对多(many-to-many)”这类关系, 返回一个结果集.Collenction也能引用自身, 或者从其他地方引用 属性 Collection元素和Association元素的属性一样, 同时有自己的特有属性 ofType 这个属性用来区分JavaBean(或字段)属性类型和集合包含的类型（类型明确下也可以省略）, 当使用反向查询select从另一个maper文件中取出数据时必须用ofType. 五. Discriminator元素1234567891011121314&lt;resultMap id="vehicleResult" type="Vehicle"&gt; &lt;id property=”id” column="id" /&gt; &lt;result property="vin" column="vin"/&gt; &lt;result property="year" column="year"/&gt; &lt;result property="make" column="make"/&gt; &lt;result property="model" column="model"/&gt; &lt;result property="color" column="color"/&gt; &lt;discriminator javaType="int" column="vehicle_type"&gt; &lt;case value="1" resultMap="carResult"/&gt; &lt;case value="2" resultMap="truckResult"/&gt; &lt;case value="3" resultMap="vanResult"/&gt; &lt;case value="4" resultMap="suvResult"/&gt; &lt;/discriminator&gt; &lt;/resultMap&gt; &emsp;&emsp;有时一条数据库查询会返回包括各种不同的数据类型的结果集。Discriminator（识别器）元素被设计来处理这种情况，以及其它像类继承层次情况。识别器类似java中的switch语句。&emsp;&emsp;Discriminator定义要指定column和javaType属性。列是MyBatis将要取出进行比较的值，javaType用来确定适当的测试是否正确运行 属性 javaType 用来确定适当的测试是否正确运行 column 指定MyBatis将要进行比较的列 case元素&emsp;&emsp;discriminator的子元素, MyBatis会从结果集中取出每条记录, 然后比较它的vehicle_type的值. 如果匹配任何 discriminator 中 case 的 value 值 , 它将使用case指定的resultMap, 而其它的case的resultMap将会被忽略 ( 除非使用extended ), 如果没有匹配到任何case，MyBatis只是简单的使用定义在discriminator块外面的resultMap.]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[commons-fileupload]]></title>
    <url>%2F2017%2F07%2F05%2Fcommons%2F</url>
    <content type="text"><![CDATA[FileItem FileItem 是一个接口, 定义了用于处理表单内容及文件内容的方法. 每个表单中的单字段元素都会被封装成一个FileItem对象 常用方法 String getFieldName(); 返回表单字段元素的name属性的值 boolean isFormField(); 判断FileItem封装的数据类型trun : 普通表单字段false : 文件表单字段 String getName();返回上传文件的文件名(根据浏览器不同, 可能包含路径) void write();将FileItem对象中的内容保存到指定文件 String getString(); 把FileItem对象保存的主体内容以一个字符串返回 String getString(String encoding);getString()重载形式, 按照指定编码格式将内容转换成字符串并返回 long getSize(); 返回单个上传文件的字节数 FileItemFactoryFileItemFactory是一个接口, 是用于构建FileItem实列的工厂 DiskFileItemFactory类是FileItemFactory接口的实现类 常用方法 void setSizeThreshold(int sizeThreshold); 设置缓存大小 void setRepositoryPath(String path); 设置临时文件存放目录 ServeltFileUploadServeltFileUpload类是处理文件上传的一个核心类 以List形式返回每个被封装成FileItem对象的表单元素集合 ServeltFileUpload构造时通常以FileItemFactory对象作为参数 常用方法 boolean isMultPartContent(HttpServletRequest request); 静态方法, 判断请求数据中的内容是否是multipart/form-data类型 List parseRequest(HttpServletRequest request); 将请求数据中的每一字段, 单独封装成FileItem对象, 放入list集合返回 void setSizeMax(long fileSizeMax); 设置请求信息实体内容最大允许的的字节数(包含文件和表单数据) void setFileSizeMax(long fileSizeMax); 设置文件最大上传字节数 void setHeaderEncoding(String encoding); 设置转换时使用的字符编码]]></content>
      <categories>
        <category>java笔记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[jsp session]]></title>
    <url>%2F2017%2F07%2F01%2Fjsp%20session%2F</url>
    <content type="text"><![CDATA[session 对象session对象是HttpSession类的实例。session对象在第一个JSP页面被装载时自动创建，完成会话期管理。session属于会话作用域, 从客户端打开浏览器并连接到服务器开始，到客户端关闭浏览器离开这个服务器结束，被称为一个会话。当一个客户访问一个服务器，可能会在服务器的几个页面之间切换，服务器当通过某种办法知道这是一个客户，就需要session对象。常用方法 void setAttribute(String name , Object value )设置指定名字name的属性值value，并将之存储在Session对象中． Object getAttribute(String name )获取指定名字name相联系的信息． void removeAttribute( String name )删除与提定名字name的相联系的信息． Enumeration getAttributeNames()返回Session对象中存储的每一个属性对象，其结果为一个类举的实例． Long getCreationTime()返回Session被创建的时间．最小单位为千分之一秒． String getId()此方法返回惟一的标识，这些标识为每个Session而产生．当只有一个单一的值与一个Session联合时，或当日志信息与先前的Session有关时，它被当做键名用． Long GetLastAccessedTime()返回当前Session对象最后被客户发送的时间，最单位为千分之一秒． int GetMaxInactiveInterval()返回总时间(秒)，负值表示Session永远不会超时．该时间为该Session对象的生存时间． void invalidate()销毁当前会话]]></content>
      <categories>
        <category>java笔记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[ASCII码对照表]]></title>
    <url>%2F2017%2F01%2F17%2FASCII%2F</url>
    <content type="text"><![CDATA[SCII（American Standard Code for Information Interchange，美国信息互换标准代码，ASCⅡ）是基于拉丁字母的一套电脑编码系统。它主要用于显示现代英语和其他西欧语言。它是现今最通用的单字节编码系统，并等同于国际标准ISO/IEC 646。 ASCII第一次以规范标准的型态发表是在1967年，最后一次更新则是在1986年，至今为止共定义了128个字符，其中33个字符无法显示（这是以现今操作系统为依归，但在DOS模式下可显示出一些诸如笑脸、扑克牌花式等8-bit符号），且这33个字符多数都已是陈废的控制字符，控制字符的用途主要是用来操控已经处理过的文字，在33个字符之外的是95个可显示的字符，包含用键盘敲下空白键所产生的空白字符也算1个可显示字符（显示为空白）。 ASCII控制字符 二进制 十进制 十六进制 缩 写 可以显示的表示法 名称/意义 0000 0000 0 00 NUL ␀ 空字符（Null） 0000 0001 1 01 SOH ␁ 标题开始 0000 0010 2 02 STX ␂ 本文开始 0000 0011 3 03 ETX ␃ 本文结束 0000 0100 4 04 EOT ␄ 传输结束 0000 0101 5 05 ENQ ␅ 请求 0000 0110 6 06 ACK ␆ 确认回应 0000 0111 7 07 BEL ␇ 响铃 0000 1000 8 08 BS ␈ 退格 0000 1001 9 09 HT ␉ 水平定位符号 0000 1010 10 0A LF ␊ 换行键 0000 1011 11 0B VT ␋ 垂直定位符号 0000 1100 12 0C FF ␌ 换页键 0000 1101 13 0D CR ␍ 归位键 0000 1110 14 0E SO ␎ 取消变换（Shift out） 0000 1111 15 0F SI ␏ 启用变换（Shift in） 0001 0000 16 10 DLE ␐ 跳出数据通讯 0001 0001 17 11 DC1 ␑ 设备控制一（XON 启用软件速度控制） 0001 0010 18 12 DC2 ␒ 设备控制二 0001 0011 19 13 DC3 ␓ 设备控制三（XOFF 停用软件速度控制） 0001 0100 20 14 DC4 ␔ 设备控制四 0001 0101 21 15 NAK ␕ 确认失败回应 0001 0110 22 16 SYN ␖ 同步用暂停 0001 0111 23 17 ETB ␗ 区块传输结束 0001 1000 24 18 CAN ␘ 取消 0001 1001 25 19 EM ␙ 连接介质中断 0001 1010 26 1A SUB ␚ 替换 0001 1011 27 1B ESC ␛ 跳出 0001 1100 28 1C FS ␜ 文件分割符 0001 1101 29 1D GS ␝ 组群分隔符 0001 1110 30 1E RS ␞ 记录分隔符 0001 1111 31 1F US ␟ 单元分隔符 0111 1111 127 7F DEL ␡ 删除 ASCII显示字符 二进制 十进制 十六进制 显示 0010 0000 32 20 （空格）(␠) 0010 0001 33 21 ! 0010 0010 34 22 “ 0010 0011 35 23 # 0010 0100 36 24 $ 0010 0101 37 25 % 0010 0110 38 26 &amp; 0010 0111 39 27 ‘ 0010 1000 40 28 ( 0010 1001 41 29 ) 0010 1010 42 2A * 0010 1011 43 2B + 0010 1100 44 2C , 0010 1101 45 2D - 0010 1110 46 2E . 0010 1111 47 2F / 0011 0000 48 30 0 0011 0001 49 31 1 0011 0010 50 32 2 0011 0011 51 33 3 0011 0100 52 34 4 0011 0101 53 35 5 0011 0110 54 36 6 0011 0111 55 37 7 0011 1000 56 38 8 0011 1001 57 39 9 0011 1010 58 3A : 0011 1011 59 3B ; 0011 1100 60 3C &lt; 0011 1101 61 3D = 0011 1110 62 3E &gt; 0011 1111 63 3F ? 0100 0000 64 40 @ 0100 0001 65 41 A 0100 0010 66 42 B 0100 0011 67 43 C 0100 0100 68 44 D 0100 0101 69 45 E 0100 0110 70 46 F 0100 0111 71 47 G 0100 1000 72 48 H 0100 1001 73 49 I 0100 1010 74 4A J 0100 1011 75 4B K 0100 1100 76 4C L 0100 1101 77 4D M 0100 1110 78 4E N 0100 1111 79 4F O 0101 0000 80 50 P 0101 0001 81 51 Q 0101 0010 82 52 R 0101 0011 83 53 S 0101 0100 84 54 T 0101 0101 85 55 U 0101 0110 86 56 V 0101 0111 87 57 W 0101 1000 88 58 X 0101 1001 89 59 Y 0101 1010 90 5A Z 0101 1011 91 5B [ 0101 1100 92 5C \ 0101 1101 93 5D ] 0101 1110 94 5E ^ 0101 1111 95 5F _ 0110 0000 96 60 ` 0110 0001 97 61 a 0110 0010 98 62 b 0110 0011 99 63 c 0110 0100 100 64 d 0110 0101 101 65 e 0110 0110 102 66 f 0110 0111 103 67 g 0110 1000 104 68 h 0110 1001 105 69 i 0110 1010 106 6A j 0110 1011 107 6B k 0110 1100 108 6C l 0110 1101 109 6D m 0110 1110 110 6E n 0110 1111 111 6F o 0111 0000 112 70 p 0111 0001 113 71 q 0111 0010 114 72 r 0111 0011 115 73 s 0111 0100 116 74 t 0111 0101 117 75 u 0111 0110 118 76 v 0111 0111 119 77 w 0111 1000 120 78 x 0111 1001 121 79 y 0111 1010 122 7A z 0111 1011 123 7B { 0111 1100 124 7C 0111 1101 125 7D } 0111 1110 126 7E ~]]></content>
      <categories>
        <category>java笔记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[MyEclipse 快捷键整理]]></title>
    <url>%2F2016%2F09%2F17%2FMyEclipse%2F</url>
    <content type="text"><![CDATA[MyEclipse是应用非常广泛的一个IDE之一, 熟练的使用IDE能够大大提高程序员的开发效率.熟练使用IDE的精髓就在于快捷键的使用了. 常用编辑器快捷键【Ctrl+C】：复制【Ctrl+X】：剪切【Ctrl+V】：粘贴【Ctrl+S】：保存文件【Ctrl+Z】：撤销【Ctrl+Y】：重复【Ctrl+F】：查找/替换 文件【Ctrl+P】 : 打印【Ctrl+F4】 : 关闭【Ctrl+Shift+S】 : 全部保存【Ctrl+Shift+F4】 : 全部关闭【Alt+Enter 】 : 显示当前选择资源(工程,or 文件)的属性【Ctrl+N】 : 新建 查找和定位快捷键【Ctrl+H】 : 打开搜索对话框【Ctrl+G】 : 工作区中的声明【Ctrl+L】 : 定位到当前编辑器的某一行，对非Java文件也有效。【Ctrl+K】、【Ctrl++Shift+K】: 快速向下和向上查找选定的内容，从此不再需要用鼠标单击查找对话框了。【Ctrl+Shift+T】 : 查找工作空间（Workspace）构建路径中的可找到Java类文件，不要为找不到类而痛苦，而且可以使用“*”、“？”等通配符。【Ctrl+Shift+R】 : 和【Ctrl+Shift+T】对应，查找工作空间（Workspace）中的所有文件（包括Java文件），也可以使用通配符。【Ctrl+Shift+G】 : 查找类、方法和属性的引用 . 非常实用的快捷键 , 例如要修改引用某个方法的代码 , 可以通过【Ctrl+Shift+G】快捷键迅速定位所有引用此方法的位置 .【Ctrl+Shift+O】 : 快速生成import，当从网上拷贝一段程序后，不知道如何import进所调用的类，试试【Ctrl+Shift+O】快捷键，一定会有惊喜。【Ctrl+Shift+F】 : 格式化代码 , 选定一段代码后按此快捷键可以格式化这段代码, 如果不选定代码则默认格式化当前文件（Java文件）。【Ctrl+Shift+U】 : 出现在文件中【Ctrl+Shift+G】 : 工作区中的引用【ALT+Shift+W】 : 查找当前文件所在项目中的路径, 可以快速定位浏览器视图的位置, 如果想查找某个文件所在的包时, 此快捷键非常有用（特别在比较大的项目中）。【Alt+←】、【Alt+→】 : 后退历史记录和前进历史记录, 在跟踪代码时非常有用, 用户可能查找了几个有关联的地方, 但可能记不清楚了, 可以通过这两个快捷键定位查找的顺序。 调试快捷键【F5】：单步跳入，当程序执行到某方法时，可以按【F5】键跟踪到方法中。【F6】：单步跳过, 单步执行程序。【F7】：单步返回, 执行完方法，返回到调用此方法的后一条语句。【F8】：继续执行，到下一个断点或程序结束。【F11】：调试最后一次执行的程序。【Ctrl+F5 】 : 单步跳入选择【Shift+F5 】 : 使用过滤器单步执行【Ctrl+F11】：运行最后一次执行的程序。【Ctrl+D】 : 显示【Ctrl+R】 : 运行至行【Ctrl+U 】 : 执行【Ctrl+Shift+B】：在当前行添加/去除断点。 视图快捷键【F3】 : 打开声明【F4】 : 打开类型层次结构【Alt+-】 : 显示系统菜单【Alt+←】 : 前一个编辑的页面【Alt+→ 】 : 后一个编辑的页面(针对上面那条来说)【Ctrl+=】 : 放大字体【Ctrl+-】 : 缩小字体【Ctrl+↑】 : 向上滚动【Ctrl+↓】 : 向下滚动【Ctrl+m】 : 最大化当前的Edit或View (再按则恢复)【Ctrl+O】 : 快速显示 OutLine, 显示类中方法和属性的大纲，能快速定位类中的方法和属性。【Ctrl+T】 : 快速显示当前类的继承结构【Ctrl+W】 : 关闭当前Editer【Ctrl+E】 : 快速显示当前Editer的下拉列表(如果当前页面没有显示的用黑体表示)【Ctrl+F3】 : 打开结构【Ctrl+F6】：切换到下一个编辑器。【Ctrl+F7】：切换到下一个视图。【Ctrl+F8】：切换到下一个透视图。【Ctrl+F10】 : 显示视图菜单【Ctrl+Shift+E】 : 显示管理当前打开的所有的View的管理器(可以选择关闭,激活等操作)【Ctrl+Shift+T】 : 打开类型【Ctrl+Shift+R】 : 打开资源【Ctrl+Shift+F4】 : 关闭所有打开的Editer【Ctrl+Shift+F6】： 切换到上一个编辑器。【Ctrl+Shift+F7】： 切换到上一个视图。【Ctrl+Shift+F8】： 切换到上一个透视图。【Shift+F2】 : 打开外部javadoc 编辑相关快捷键【F2】 : 显示工具提示描述【Insert】 : 改写切换【ALT+/】 : 代码提示【Alt+↓】 : 移动当前行到下一行【Alt+↑】 : 移动当前行到上一行【Alt+Shift+↑】 选择封装元素(扩大范围)【Alt+Shift+↓】 选择封装元素(缩小范围)【Alt+Shift+←】 选择上一个元素【Alt+Shift+→】选择下一个元素【Ctrl+1】 : 快速修复(最经典的快捷键,就不用多说了)【Ctrl+/】 : 快速添加注释 , 再次使用取消注释【Ctrl + Shift + /】 : 添加多行注释【Ctrl + Shift + \】 : 取消多行注释【Ctrl + Shift + c】 : 添加 or 取消单行注释, 支持范围更大【Ctrl+D】 : 删除当前行【Ctrl+Q】 : 定位到最后编辑的地方【Ctrl+J 】 : 正向增量查找(按下Ctrl+J后,你所输入的每个字母编辑器都提供快速匹配定位到某个单词,如果没有,则在stutes line中显示没有找到)【Ctrl+L 】 : 定位在某行 (对于程序超过100的人就有福音了)【Ctrl+K 】 : 参照选中的Word快速定位到下一个【Ctrl+M】 : 窗口最大化和还原，用户在窗口中进行操作时，总会觉得当前窗口小（尤其在编写代码时），现在好了，试试【Ctrl+M】快捷键。【Ctrl+/(小键盘)】 : 折叠 or 展开当前类中的所有代码【Ctrl+Alt+↓】 : 复制当前行到下一行(复制增加)【Ctrl+Alt+↑】 : 复制当前行到上一行(复制增加)【Ctrl+Shift+K】 : 参照选中的Word快速定位到上一个【Ctrl+Shift+J】 : 反向增量查找(和上条相同,只不过是从后往前查)【Ctrl+Shift+X】 : 把当前选中的文本全部变为大写【Ctrl+Shift+Y】 : 把当前选中的文本全部变为小写【Ctrl+Shift+F 】 : 格式化当前代码【Ctrl+Shift+P】 : 定位到对于的匹配符(譬如{}) (从前面定位后面时,光标要在匹配符里面,后面到前面,则反之)【Shift+Enter】 : 在当前行的下一行插入空行(这时鼠标可以在当前行的任一位置,不一定是最后)【Shift+Ctrl+Enter】 : 在当前行的上一行插入空行(原理同上条) 重构【Alt+Shift+R】 : 同步重命名(将所有已引用的该变量同时改名)【Alt+Shift+M】 : 抽取方法 (这是重构里面最常用的方法之一了,尤其是对一大堆泥团代码有用)【Alt+Shift+C】: 修改函数结构(比较实用,有N个函数调用了这个方法,修改一次搞定)【Alt+Shift+L】: 抽取本地变量( 可以直接把一些魔法数字和字符串抽取成一个变量,尤其是多处调用的时候)【Alt+Shift+F】: 把Class中的local变量变为field变量 (比较实用的功能)【Alt+Shift+I】: 合并变量(可能这样说有点不妥Inline)【Alt+Shift+V】: 移动函数和变量(不怎么常用)【Alt+Shift+Z】: 重构的后悔药(Undo)]]></content>
      <categories>
        <category>IDE</category>
      </categories>
  </entry>
</search>