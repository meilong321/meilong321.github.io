<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>梅&#39;s</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://meilong321.github.io/"/>
  <updated>2017-07-05T09:25:06.683Z</updated>
  <id>https://meilong321.github.io/</id>
  
  <author>
    <name>melon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>commons-fileupload</title>
    <link href="https://meilong321.github.io/2017/07/05/commons/"/>
    <id>https://meilong321.github.io/2017/07/05/commons/</id>
    <published>2017-07-05T05:48:31.000Z</published>
    <updated>2017-07-05T09:25:06.683Z</updated>
    
    <content type="html"><![CDATA[<h2 id="FileItem"><a href="#FileItem" class="headerlink" title="FileItem"></a>FileItem</h2><p>  FileItem 是一个接口, 定义了用于处理表单内容及文件内容的方法.<br>  每个表单中的单字段元素都会被封装成一个FileItem对象<br><a id="more"></a></p>
<h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><ul>
<li>String getFieldName();<br>  返回表单字段元素的name属性的值</li>
<li>boolean isFormField();<br>  判断FileItem封装的数据类型<br>trun : 普通表单字段<br>false : 文件表单字段</li>
<li>String getName();<br>返回上传文件的文件名(根据浏览器不同, 可能包含路径)</li>
<li>void write();<br>将FileItem对象中的内容保存到指定文件</li>
<li>String getString();<br>  把FileItem对象保存的主体内容以一个字符串返回</li>
<li>String getString(String encoding);<br>getString()重载形式, 按照指定编码格式将内容转换成字符串并返回</li>
<li>long getSize();<br>  返回单个上传文件的字节数</li>
</ul>
<p><br></p>
<h2 id="FileItemFactory"><a href="#FileItemFactory" class="headerlink" title="FileItemFactory"></a>FileItemFactory</h2><p>FileItemFactory是一个接口, 是用于构建FileItem实列的工厂<br>  DiskFileItemFactory类是FileItemFactory接口的实现类</p>
<h4 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h4><ul>
<li>void  setSizeThreshold(int sizeThreshold);<br>  设置缓存大小</li>
<li>void  setRepositoryPath(String path);<br>  设置临时文件存放目录</li>
</ul>
<p><br></p>
<h2 id="ServeltFileUpload"><a href="#ServeltFileUpload" class="headerlink" title="ServeltFileUpload"></a>ServeltFileUpload</h2><p>ServeltFileUpload类是处理文件上传的一个核心类<br>    以List形式返回每个被封装成FileItem对象的表单元素集合<br>    ServeltFileUpload构造时通常以FileItemFactory对象作为参数</p>
<p>####常用方法</p>
<ul>
<li>boolean isMultPartContent(HttpServletRequest request);<br>  静态方法, 判断请求数据中的内容是否是multipart/form-data类型</li>
<li>List parseRequest(HttpServletRequest request);<br>  将请求数据中的每一字段, 单独封装成FileItem对象, 放入list集合返回</li>
<li>void setSizeMax(long fileSizeMax);<br>  设置请求信息实体内容最大允许的的字节数(包含文件和表单数据)</li>
<li>void setFileSizeMax(long fileSizeMax);<br>  设置文件最大上传字节数</li>
<li>void setHeaderEncoding(String encoding);<br>  设置转换时使用的字符编码</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;FileItem&quot;&gt;&lt;a href=&quot;#FileItem&quot; class=&quot;headerlink&quot; title=&quot;FileItem&quot;&gt;&lt;/a&gt;FileItem&lt;/h2&gt;&lt;p&gt;  FileItem 是一个接口, 定义了用于处理表单内容及文件内容的方法.&lt;br&gt;  每个表单中的单字段元素都会被封装成一个FileItem对象&lt;br&gt;
    
    </summary>
    
      <category term="java笔记" scheme="https://meilong321.github.io/categories/java%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>jsp session</title>
    <link href="https://meilong321.github.io/2017/07/01/jsp%20session/"/>
    <id>https://meilong321.github.io/2017/07/01/jsp session/</id>
    <published>2017-07-01T14:28:35.000Z</published>
    <updated>2017-07-02T06:31:01.499Z</updated>
    
    <content type="html"><![CDATA[<h3 id="session-对象"><a href="#session-对象" class="headerlink" title="session 对象"></a>session 对象</h3><p>session对象是HttpSession类的实例。<br>session对象在第一个JSP页面被装载时自动创建，完成会话期管理。<br>session属于会话作用域, 从客户端打开浏览器并连接到服务器开始，到客户端关闭浏览器离开这个服务器结束，被称为一个会话。<br>当一个客户访问一个服务器，可能会在服务器的几个页面之间切换，服务器当通过某种办法知道这是一个客户，就需要session对象。<br><a id="more"></a><br>常用方法</p>
<ul>
<li><p>void setAttribute(String name , Object value )<br>设置指定名字name的属性值value，并将之存储在Session对象中．</p>
</li>
<li><p>Object getAttribute(String name )<br>获取指定名字name相联系的信息．</p>
</li>
<li><p>void removeAttribute( String name )<br>删除与提定名字name的相联系的信息．</p>
</li>
<li><p>Enumeration getAttributeNames()<br>返回Session对象中存储的每一个属性对象，其结果为一个类举的实例．</p>
</li>
<li><p>Long getCreationTime()<br>返回Session被创建的时间．最小单位为千分之一秒．</p>
</li>
<li><p>String getId()<br>此方法返回惟一的标识，这些标识为每个Session而产生．当只有一个单一的值与一个Session联合时，或当日志信息与先前的Session有关时，它被当做键名用．</p>
</li>
<li><p>Long GetLastAccessedTime()<br>返回当前Session对象最后被客户发送的时间，最单位为千分之一秒．</p>
</li>
<li><p>int GetMaxInactiveInterval()<br>返回总时间(秒)，负值表示Session永远不会超时．该时间为该Session对象的生存时间．</p>
</li>
<li><p>void invalidate()<br>销毁当前会话</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;session-对象&quot;&gt;&lt;a href=&quot;#session-对象&quot; class=&quot;headerlink&quot; title=&quot;session 对象&quot;&gt;&lt;/a&gt;session 对象&lt;/h3&gt;&lt;p&gt;session对象是HttpSession类的实例。&lt;br&gt;session对象在第一个JSP页面被装载时自动创建，完成会话期管理。&lt;br&gt;session属于会话作用域, 从客户端打开浏览器并连接到服务器开始，到客户端关闭浏览器离开这个服务器结束，被称为一个会话。&lt;br&gt;当一个客户访问一个服务器，可能会在服务器的几个页面之间切换，服务器当通过某种办法知道这是一个客户，就需要session对象。&lt;br&gt;
    
    </summary>
    
      <category term="java笔记" scheme="https://meilong321.github.io/categories/java%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>nihao</title>
    <link href="https://meilong321.github.io/2017/07/01/nihao/"/>
    <id>https://meilong321.github.io/2017/07/01/nihao/</id>
    <published>2017-07-01T10:30:38.000Z</published>
    <updated>2017-07-02T06:16:42.228Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎来到我的博客</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;欢迎来到我的博客&lt;/p&gt;

    
    </summary>
    
      <category term="java笔记" scheme="https://meilong321.github.io/categories/java%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>hello word</title>
    <link href="https://meilong321.github.io/2017/07/01/hello-word/"/>
    <id>https://meilong321.github.io/2017/07/01/hello-word/</id>
    <published>2017-07-01T09:28:35.000Z</published>
    <updated>2017-07-02T07:57:46.749Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
</feed>
